{"version":3,"sources":["components/APIModule.js","components/items-sold-out/progress.jsx","components/items-sold-out/fetchButton.jsx","components/items-sold-out/inputTextarea.jsx","components/items-sold-out/index.js","components/add-items-blacklist/index.js","components/Home.js","App.js","reportWebVitals.js","index.js"],"names":["APIModule","url","a","fetch","then","res","text","catch","error","console","ids","method","body","JSON","stringify","json","data","LinearProgressWithLabel","props","Box","display","alignItems","width","mr","LinearProgress","variant","minWidth","Typography","color","value","toFixed","useStyles","makeStyles","theme","bar","loading","marginLeft","spacing","layout","height","ProgressBar","progress","classes","className","ProgressLoading","CircularProgress","fetchButton","onClick","isLoading","disabled","Button","InputTextarea","label","placeholder","onChange","btnClick","handleCopy","inputRef","useRef","flexDirection","p","current","select","document","execCommand","TextareaAutosize","maxRows","minRows","defaultValue","readOnly","ref","ItemsSoldOut","useState","itemsNotBlocked","setItemsNotBlocked","itemsShouldBeDeleted","setItemsShouldBeDeleted","uploadIds","setUploadIds","blockedIds","setBlockedIds","concurrency","setConcurrency","setDisabled","setIsLoading","countItems","setCountItems","setProgress","getBlockedIds","length","getAPI","blocked_ids","remove_empty_line","removeEmptyLines","dataOutput","convert_blocked_ids","convertStringToArr","items_not_blocked","getItemsNotBlocked","trim","str","split","map","item","parseInt","upload_ids","filter","includes","getItemsShouldBeDeleted","arr_items","chunkArray","items","count","postAPI","status","push","id","percent","alert","array","size","result","i","chunk","slice","toString","replaceAll","handleItemsNotBlocked","convert_upload_ids","useEffect","justifyContent","e","target","TextField","type","strValue","BootstrapInput","withStyles","root","marginTop","input","borderRadius","position","backgroundColor","palette","background","paper","border","fontSize","padding","transition","transitions","create","borderColor","boxShadow","InputBase","margin","AddItemsBlacklist","selectedValue","setSelectedValue","Grid","FormControl","InputLabel","htmlFor","NativeSelect","component","RadioGroup","name","FormControlLabel","control","Radio","Home","App","path","exact","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.9ffd1b12.chunk.js","sourcesContent":["class fetchAPI {\r\n    async getAPI(url) {\r\n        return await fetch(url)\r\n            .then(res => res.text())\r\n            .catch(error => console.error('Error: ', error));\r\n    }\r\n\r\n    async postAPI(url, ids) {\r\n        const res = await fetch(url, {\r\n                method: 'POST',\r\n                body: JSON.stringify({ \"item_ids\": ids })\r\n            })\r\n            .then(res => res.json())\r\n            .then(data => data)\r\n            .catch(error => console.error('Error: ', error));\r\n            \r\n        return await res.data;\r\n    }\r\n}\r\n\r\nexport const APIModule = new fetchAPI();\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport LinearProgress from '@material-ui/core/LinearProgress';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Box from '@material-ui/core/Box';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\n\r\nfunction LinearProgressWithLabel(props) {\r\n  return (\r\n    <Box display=\"flex\" alignItems=\"center\">\r\n      <Box width=\"100%\" mr={1}>\r\n        <LinearProgress variant=\"determinate\" {...props} />\r\n      </Box>\r\n      <Box minWidth={35}>\r\n        <Typography variant=\"body2\" color=\"textSecondary\">{`${(props.value).toFixed()}%`}</Typography>\r\n      </Box>\r\n    </Box>\r\n  );\r\n}\r\n\r\nLinearProgressWithLabel.propTypes = {\r\n  /**\r\n   * The value of the progress indicator for the determinate and buffer variants.\r\n   * Value between 0 and 100.\r\n   */\r\n  value: PropTypes.number.isRequired,\r\n};\r\n  \r\nconst useStyles = makeStyles((theme) => ({\r\n\tbar: {\r\n\t\twidth: '40%',\r\n\t},\r\n\r\n  loading: {\r\n    display: 'flex',\r\n    '& > * + *': {\r\n      marginLeft: theme.spacing(2),\r\n    },\r\n    marginLeft: '10px'\r\n  },\r\n\r\n  layout: {\r\n    height: '35px !important',\r\n    width: '35px !important'\r\n  }\r\n}));\r\n\r\nexport const ProgressBar = ({ progress }) => {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <div className={classes.bar}>\r\n      <LinearProgressWithLabel value={progress} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport const ProgressLoading = () => {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <div className={classes.loading}>\r\n      <CircularProgress color=\"primary\" className={classes.layout} />\r\n    </div>\r\n  );\r\n}\r\n \r\nexport default {\r\n  ProgressBar, ProgressLoading\r\n};\r\n","import React from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport './style.css';\r\n\r\nconst fetchButton = ({\r\n    onClick,\r\n    isLoading,\r\n    disabled,\r\n}) => {\r\n    return (\r\n        <Button \r\n            className=\"btn-fetch\" \r\n            variant=\"contained\" \r\n            onClick={onClick} \r\n            disabled={disabled ? disabled : isLoading}\r\n        >\r\n            Fetch\r\n        </Button>\r\n    );\r\n}\r\n \r\nexport default fetchButton;","import React, { useRef } from 'react';\r\nimport Box from '@material-ui/core/Box';\r\nimport TextareaAutosize from '@material-ui/core/TextareaAutosize';\r\nimport './style.css';\r\nimport { ProgressLoading } from './progress.jsx';\r\nimport FetchButton from './fetchButton';\r\nimport FileCopyIcon from '@material-ui/icons/FileCopy';\r\nimport Button from '@material-ui/core/Button';\r\n\r\nconst InputTextarea = ({ \r\n    label,\r\n    isLoading,\r\n    placeholder,\r\n    value,\r\n    onChange,\r\n    btnClick,\r\n    handleCopy\r\n}) => {\r\n    const inputRef = useRef();\r\n\r\n    const handleCopyClick = () => {\r\n        inputRef.current.select();\r\n        document.execCommand('copy');\r\n    }\r\n\r\n    return (\r\n        <Box \r\n            display=\"flex\" \r\n            flexDirection=\"column\"\r\n            alignItems=\"center\"\r\n            width=\"20%\"\r\n            p={2}\r\n        >\r\n            {btnClick ?\r\n                <Box className=\"box-blocked-ids\">\r\n                    <label className=\"label-box\">{ label }</label>\r\n                    <FetchButton onClick={btnClick} isLoading={isLoading} />\r\n                    {isLoading &&\r\n                        <ProgressLoading />\r\n                    }\r\n                </Box> : handleCopy ? (\r\n                    <Box\r\n                        display=\"flex\"\r\n                        flex-direction=\"row\"\r\n                        justify-content=\"center\"\r\n                    >\r\n                        <label className=\"label-text\">{ label }</label>\r\n                        <Button onClick={handleCopyClick} className=\"btn-copy\"><FileCopyIcon /></Button></Box>) :\r\n                    <label className=\"label-text\">{ label }</label>\r\n            }\r\n            \r\n            {onChange ? \r\n                <TextareaAutosize\r\n                    className=\"input-textarea\"\r\n                    aria-label=\"maximum height\" \r\n                    maxRows={30} \r\n                    minRows={30}\r\n                    onChange={onChange}\r\n                    value={value}\r\n                    placeholder={placeholder}\r\n                /> : \r\n                <TextareaAutosize\r\n                    className=\"input-textarea\"\r\n                    aria-label=\"maximum height\" \r\n                    maxRows={30} \r\n                    minRows={30}\r\n                    defaultValue={value}\r\n                    readOnly \r\n                    ref={inputRef}\r\n                />\r\n            }\r\n        </Box>\r\n    );\r\n}\r\n \r\nexport default InputTextarea;\r\n","import React, { useState, useEffect, useRef } from 'react';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Box from '@material-ui/core/Box';\r\nimport { APIModule } from '../APIModule';\r\nimport { ProgressBar } from './progress.jsx';\r\nimport InputTextarea from './inputTextarea.jsx';\r\nimport FetchButton from './fetchButton';\r\nimport './style.css';\r\n\r\nexport default function ItemsSoldOut() {\r\n\r\n  const [itemsNotBlocked, setItemsNotBlocked] = useState([]);\r\n  const [itemsShouldBeDeleted, setItemsShouldBeDeleted] = useState([]);\r\n  const [uploadIds, setUploadIds] = useState([]);\r\n  const [blockedIds, setBlockedIds] = useState([]);\r\n  const [concurrency, setConcurrency] = useState(300);\r\n  const [disabled, setDisabled] = useState(true);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [countItems, setCountItems] = useState(0);\r\n  const [progress, setProgress] = useState(0);\r\n  const inputRef = useRef();\r\n\r\n  const url_blocked_ids = 'https://d32kd3i4w6exck.cloudfront.net/api/get-blocked-ids';\r\n  const url_sold_out = 'https://k53bmxe71g.execute-api.ap-northeast-1.amazonaws.com/Stage/is-sold-out';\r\n\r\n  const getBlockedIds = async () => {\r\n    if(!blockedIds.length) {\r\n      setIsLoading(true);\r\n    }\r\n    // get blocked ids API\r\n    let blocked_ids = await APIModule.getAPI(url_blocked_ids);\r\n    if(uploadIds.length) {\r\n      const remove_empty_line = removeEmptyLines(uploadIds);\r\n      setUploadIds(dataOutput(remove_empty_line));\r\n      const convert_blocked_ids = convertStringToArr(blocked_ids);\r\n      const items_not_blocked = getItemsNotBlocked(convert_blocked_ids, remove_empty_line);\r\n      setCountItems(items_not_blocked.length);\r\n      setItemsNotBlocked(dataOutput(items_not_blocked));\r\n    }\r\n    setBlockedIds(blocked_ids);\r\n  }\r\n\r\n  const removeEmptyLines = (data) => {\r\n    const convert_to_arr = convertStringToArr(data.trim());\r\n    return convert_to_arr;\r\n  }\r\n\r\n  const convertStringToArr = (str) => {\r\n    let re = /\\s|,\\s|,/; // (' ' || ', ' || '\\n')\r\n    let arr = str.split(re);\r\n    return arr.map(item => {\r\n      return parseInt(item)\r\n    });\r\n  }\r\n\r\n  const getItemsNotBlocked = (blocked_ids, upload_ids) => {\r\n    let items_not_blocked = upload_ids.filter(item => {\r\n      // upload ids - blocked ids\r\n      if(!blocked_ids.includes(item)) {\r\n        return item;\r\n      }\r\n    })\r\n    // check items_not_blocked to enable button fetch\r\n    if(items_not_blocked.length) {\r\n      setDisabled(false);\r\n    }\r\n    return items_not_blocked;\r\n  }\r\n\r\n  const getItemsShouldBeDeleted = async () => {\r\n    if (itemsNotBlocked.length) {\r\n      setDisabled(true);\r\n      const items_not_blocked = convertStringToArr(itemsNotBlocked);\r\n      const arr_items = chunkArray(items_not_blocked, concurrency);\r\n      const items = [];\r\n      let count = 0;\r\n\r\n      for (const item of arr_items) {\r\n        const res = await APIModule.postAPI(url_sold_out, item);\r\n        res.filter(data => {\r\n          if (data && data.status) {\r\n            return items.push(data.id);\r\n          }\r\n        });\r\n        let percent = ++count*100/arr_items.length;\r\n        // console.log('percent ', percent);\r\n        // console.log('ids: ', count);\r\n        setProgress(percent);\r\n        if(percent === 100) {\r\n          alert('Done!');\r\n        }\r\n        setItemsShouldBeDeleted(dataOutput(items));\r\n      }\r\n      setDisabled(false);\r\n    }\r\n  }\r\n\r\n  const chunkArray = (array, size) => {\r\n    let result = []\r\n    for (let i = 0; i < array.length; i += size) {\r\n        let chunk = array.slice(i, i + size)\r\n        result.push(chunk)\r\n    }\r\n    return result\r\n  }\r\n\r\n  const handleConcurrency = (e) => {\r\n    let strValue = e.target.value;\r\n    let value = parseInt(strValue);\r\n    setConcurrency(value >= 50 ? value : concurrency);\r\n  }\r\n\r\n  const dataOutput = (data) => {\r\n    return data.toString().replaceAll(',', '\\n');\r\n  }\r\n\r\n  const handleItemsNotBlocked = async (blocked_ids, upload_ids) => {\r\n    let convert_blocked_ids = await convertStringToArr(blocked_ids);\r\n    let convert_upload_ids = await convertStringToArr(upload_ids);\r\n    let items_not_blocked = await getItemsNotBlocked(convert_blocked_ids, convert_upload_ids);\r\n    setCountItems(items_not_blocked.length);\r\n    return setItemsNotBlocked(dataOutput(items_not_blocked));\r\n  }\r\n\r\n  const handleUploadIds = (e) => {\r\n\r\n    setUploadIds(e.target.value)\r\n    if (!blockedIds.length) { // blocked ids is null\r\n      setItemsNotBlocked(e.target.value);\r\n      setDisabled(true);\r\n      let items = convertStringToArr(e.target.value);\r\n      setCountItems(items.length);\r\n    } else {\r\n      handleItemsNotBlocked(blockedIds, e.target.value);\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    setIsLoading(false);\r\n  }, [blockedIds]);\r\n  \r\n  return (\r\n    <div className=\"layout\">\r\n      <Box \r\n        display=\"flex\" \r\n        flexDirection=\"row\"\r\n        justifyContent=\"center\"\r\n      >\r\n        <InputTextarea \r\n          label={'Uploaded ids on Tmall'}\r\n          placeholder=\"\r\n            12345678\r\n            12344555\r\n            11222222\"\r\n          value={uploadIds}\r\n          onChange={handleUploadIds}\r\n        />\r\n        <InputTextarea\r\n          label={'Blocked ids on Brandear'}\r\n          isLoading={isLoading}\r\n          value={blockedIds}\r\n          btnClick={getBlockedIds}\r\n        />\r\n        <InputTextarea \r\n          label={'Items not blocked on Brandear'}\r\n          value={itemsNotBlocked}\r\n        />\r\n        <InputTextarea \r\n          label={'Items should be deleted on Tmall'}\r\n          value={itemsShouldBeDeleted}\r\n          handleCopy={true}\r\n        />\r\n      </Box>\r\n      <Box \r\n        display=\"flex\" \r\n        flexDirection=\"row\"\r\n        justifyContent=\"center\"\r\n        p={2}\r\n      >\r\n        <ProgressBar progress={progress} />\r\n      </Box>\r\n      <Box \r\n        display=\"flex\" \r\n        flexDirection=\"row\"\r\n        justifyContent=\"center\"\r\n        p={2}\r\n      >\r\n        <label className=\"label-concurrency\">Concurrency</label>\r\n        <TextField \r\n          id=\"outlined-basic\" \r\n          size=\"small\" \r\n          type=\"number\"\r\n          variant=\"outlined\" \r\n          className=\"input-concurrency\" \r\n          defaultValue={concurrency}\r\n          onChange={handleConcurrency} \r\n        /> \r\n        <FetchButton onClick={getItemsShouldBeDeleted} disabled={disabled} />\r\n      </Box>\r\n      <Box \r\n        display=\"flex\" \r\n        flexDirection=\"row\"\r\n        justifyContent=\"center\"\r\n        p={2}\r\n      >\r\n        <label> Items: {countItems} </label>\r\n      </Box>\r\n    </div>\r\n  );\r\n}","import React, { useState } from 'react';\r\nimport { \r\n  Box, \r\n  Grid, \r\n  InputLabel,\r\n  NativeSelect,\r\n  makeStyles,\r\n  withStyles,\r\n  InputBase,\r\n  FormControl,\r\n  TextareaAutosize,\r\n  Button,\r\n  Radio,\r\n  RadioGroup,\r\n  FormControlLabel,\r\n  FormLabel\r\n} from '@material-ui/core';\r\nimport './style.css';\r\n\r\nconst BootstrapInput = withStyles((theme) => ({\r\n  root: {\r\n    'label + &': {\r\n      marginTop: theme.spacing(3),\r\n    },\r\n  },\r\n  input: {\r\n    borderRadius: 4,\r\n    position: 'relative',\r\n    backgroundColor: theme.palette.background.paper,\r\n    border: '1px solid #ced4da',\r\n    fontSize: 16,\r\n    padding: '10px 26px 10px 12px',\r\n    transition: theme.transitions.create(['border-color', 'box-shadow']),\r\n    // Use the system font instead of the default Roboto font.\r\n    // fontFamily: [\r\n    //   '-apple-system',\r\n    //   'BlinkMacSystemFont',\r\n    //   '\"Segoe UI\"',\r\n    //   'Roboto',\r\n    //   '\"Helvetica Neue\"',\r\n    //   'Arial',\r\n    //   'sans-serif',\r\n    //   '\"Apple Color Emoji\"',\r\n    //   '\"Segoe UI Emoji\"',\r\n    //   '\"Segoe UI Symbol\"',\r\n    // ].join(','),\r\n    '&:focus': {\r\n      borderRadius: 4,\r\n      borderColor: '#80bdff',\r\n      boxShadow: '0 0 0 0.2rem rgba(0,123,255,.25)',\r\n    },\r\n  },\r\n}))(InputBase);\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  margin: {\r\n      margin: theme.spacing(1),\r\n  },\r\n}));\r\n\r\nexport default function AddItemsBlacklist() {\r\n  const classes = useStyles();\r\n  const [selectedValue, setSelectedValue] = useState('Kisaragi');\r\n\r\n  const handleChange = (e) => {\r\n    setSelectedValue(e.target.value);\r\n  }\r\n\r\n  return (\r\n    <div className=\"layout-blacklist\">\r\n      <Grid className=\"grid-container\">\r\n        <label></label>\r\n        <Box\r\n          display=\"flex\"\r\n          flexDirection=\"column\"\r\n          justifyContent=\"right\"\r\n        >\r\n          <FormControl className={classes.margin}>\r\n            <InputLabel htmlFor=\"demo-customized-select-native\">Select list</InputLabel>\r\n            <NativeSelect\r\n              id=\"demo-customized-select-native\"\r\n              // value={age}\r\n              // onChange={handleChange}\r\n              input={<BootstrapInput />}\r\n            >\r\n              <option aria-label=\"None\" value=\"\" />\r\n              <option value={10}>Add items blacklist</option>\r\n              <option value={20}>Add items seller list</option>\r\n            </NativeSelect>\r\n          </FormControl>\r\n        </Box>\r\n        <label className=\"label-select\">System</label>\r\n        <Box\r\n          display=\"flex\"\r\n          flexDirection=\"row\"\r\n          justifyContent=\"\"\r\n        >\r\n          <FormControl component=\"fieldset\">\r\n            <RadioGroup name=\"select-system\" value={selectedValue} onChange={handleChange}>\r\n              <Box\r\n                display=\"flex\"\r\n                flex-direction=\"column\"\r\n                justify-content=\"center\"\r\n              >\r\n                {['Kisaragi', 'Fumizuki', 'Odawara', 'Xianvu'].map(value => (\r\n                  <FormControlLabel \r\n                    value={value} \r\n                    control={<Radio />} \r\n                    label={value} \r\n                    className={value !== 'Kisaragi' ? \"box-radio\" : ''}\r\n                  />\r\n                ))}\r\n              </Box>\r\n            </RadioGroup>\r\n          </FormControl>\r\n        </Box>\r\n        <label> Items ids </label>\r\n        <Box\r\n          display=\"flex\"\r\n          flex-direction=\"row\"\r\n          justifyContent=\"\"\r\n        >\r\n          <TextareaAutosize\r\n            aria-label=\"maximum height\" \r\n            maxRows={50} \r\n            minRows={50}\r\n            className=\"aria-text\"\r\n          />\r\n        </Box>\r\n        <Box\r\n          display=\"flex\"\r\n          flex-direction=\"row\"\r\n          justifyContent=\"flex-end\"\r\n          className=\"box-btn\"\r\n        >\r\n          <Button \r\n            variant=\"contained\" \r\n            color=\"secondary\"\r\n          >\r\n            Clear\r\n          </Button>\r\n          <Button \r\n            variant=\"contained\" \r\n            color=\"primary\"\r\n            className=\"btn-add\"\r\n          >\r\n            Add\r\n          </Button>\r\n        </Box>\r\n      </Grid>\r\n    </div>\r\n  )\r\n}\r\n","import React from 'react';\r\nimport { ProSidebar, SidebarHeader, SidebarFooter, SidebarContent } from 'react-pro-sidebar';\r\nimport './home.scss';\r\n\r\nexport default function Home() {\r\n\r\n  return (\r\n    <>\r\n      <ProSidebar>\r\n        <SidebarHeader>\r\n          {/**\r\n           *  You can add a header for the sidebar ex: logo\r\n           */}\r\n           header\r\n        </SidebarHeader>\r\n        <SidebarContent>\r\n          {/**\r\n           *  You can add the content of the sidebar ex: menu, profile details, ...\r\n           */}\r\n           content\r\n        </SidebarContent>\r\n        <SidebarFooter>\r\n          {/**\r\n           *  You can add a footer for the sidebar ex: copyright\r\n           */}\r\n           footer\r\n        </SidebarFooter>\r\n      </ProSidebar>;\r\n    </>\r\n  )\r\n}\r\n","import React, { Component } from 'react';\r\nimport ItemsSoldOut from './components/items-sold-out';\r\nimport AddItemsBlacklist from './components/add-items-blacklist';\r\nimport './app.css';\r\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\r\nimport Home from './components/Home.js';\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"app\">\r\n        <Home />\r\n        <Router>\r\n          <Route\r\n            path=\"/items-sold-out\"\r\n            exact={true}\r\n            component={ItemsSoldOut}\r\n          />\r\n          <Route\r\n            path=\"/add-items-blacklist\"\r\n            exact={true}\r\n            component={AddItemsBlacklist}\r\n          />\r\n        </Router>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}